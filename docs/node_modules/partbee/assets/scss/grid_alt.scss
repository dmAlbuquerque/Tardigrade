// Custom Grid Generator
// settings
$breakpoints: (
  xs: ( label: "Mobile", minQuery: "(min-width: 0px)", rangeQuery: "(max-width: 480px)", maxQuery: "(max-width: 480px)", maxWidth: none),
  sm: ( label: "Mobile Landing", minQuery: "(min-width: 481px)", rangeQuery: "(min-width: 481px) and (max-width: 768px)", maxQuery: "(max-width: 768px)", maxWidth: none),
  md: ( label: "Tablet", minQuery: "(min-width: 769px)", rangeQuery: "(min-width: 769px) and (max-width: 1200px)", maxQuery: "(max-width: 1200px)", maxWidth: none),
  lg: ( label: "PC", minQuery: "(min-width: 1025px)",rangeQuery: "(min-width: 1025px) and (max-width: 1200px)",maxQuery: "(max-width: 1200px)", maxWidth: 960px),
  xl: ( label: "Big resolutions",minQuery: "(min-width: 1201px)",rangeQuery: "(min-width: 1201px)", maxQuery: "(min-width: 1201px)", maxWidth: 68vw)
);

$columns_alt: 10;
$gutter_alt: 30px;
$term: 'g10';
$color: rgb(114, 184, 26);

$settings: (
  columns: $columns_alt,
  margin: $gutter_alt/2
);

// Responsivel Mixins
@mixin media($queryString) {
   @media #{$queryString}{
    @content;
  }
}
@mixin mediaBySize($size) {
  $media_data: map-get($breakpoints, $size);
  @include media(map-get($media_data, "maxQuery")) {
     @content;
  }
}
@mixin mediaForSize($size) {
  $media_data: map-get($breakpoints, $size);
  @include media(map-get($media_data, "rangeQuery")) {
     @content;
  }
}
@mixin mediaUpSize($size) {
  $media_data: map-get($breakpoints, $size);
  @include media(map-get($media_data, "minQuery")) {
     @content;
  }
}
@mixin box-sizing($value) {
    -webkit-box-sizing: $value;
    -moz-box-sizing: $value;
    box-sizing: $value;
}

// Grid Mixins
@mixin renderGridStyles($settings) {
   @each $key, $breakpoint in $breakpoints{
    // Render visible and hidden classes
    @include elementVisibilty($key);

    // Debug mode
    @include renderDebugResponsive($key, $breakpoint);

    // Render specific layout at Media Query
    @if $key == xs { @include renderGrid($key, $settings); }
    @else {
      @include media(map-get($breakpoint, "minQuery")){
        @include renderGrid($key, $settings);
      }
      @include media(map-get($breakpoint, "maxQuery")){
        .container {
          max-width: map-get($breakpoint, "maxWidth");
        }
      }
    }
  }
}
@mixin renderGrid($key, $settings) {
  $i: 1;

  .#{$term}-#{$key}-offset-0 {
    margin-left: 0;
  }
  @while $i <= map-get($settings, "columns") {

    .#{$term}-#{$key}-#{$i} {
      width: 100% * $i / map-get($settings,"columns");

      @extend %col-settings;
      @extend %col-debug;
      // Margin top and bottom in XS mode
      @if $key == xs {
         @include mediaBySize(xs){
          margin-top: 2px;
          margin-bottom: 2px;
        }
      }
    }
    // Offset
    .#{$term}-#{$key}-offset-#{$i} {
      margin-left: 100% * $i / map-get($settings,"columns");
    }
    // Pull
    .#{$term}-#{$key}-pull-#{$i} {
      right: 100% * $i / map-get($settings,"columns");
    }
    // Push
    .#{$term}-#{$key}-push-#{$i} {
      left: 100% * $i / map-get($settings,"columns");
    }

    $i: $i+1;
  }
}
@mixin elementVisibilty($key) {
 @include mediaForSize($key) {
   .hidden-#{$key} { display: none !important; }
   .visible-#{$key}-block { display: block !important; }
   .visible-#{$key}-inline { display: inline !important; }
   .visible-#{$key}-inline-block { display: inline-block !important; }
 }
}

// Debug mixins
@mixin renderGridDebug($settings) {
  body.debug {
    &:before {
      display: block;

      width: 25px;
      height: 25px;

      text-align: center;

      color: #fff;
      border: 1px solid #333;
      border-radius: 2px;
      border-color: darken($color, 20%);
      background-color: $color;

      @extend %debug-labels;
    }

    &:after {
      left: 35px;
      padding: 0 4px;
      background-color: #fff;
      @extend %debug-labels;
      color: #333;
    }
  }

  @each $key, $breakpoint in $breakpoints{
    @include renderDebugResponsive($key, $breakpoint);
  }
}
@mixin renderDebugResponsive($key, $breakpoint) {
   @include media(map-get($breakpoint, "rangeQuery")){
    body.debug {
      &:before {
        content: "#{$key}";
      }
      &:after {
        content: map-get($breakpoint, "label");
      }
    }
  };
}

// Placeholders
@include media(screen) {
  %col-settings {
    position: relative;

    float: left;

    min-height: 1px;
    padding-right: map-get($settings, "margin");
    padding-left: map-get($settings, "margin");
  }

  %col-debug {
    .debug & {
      @extend %debug;
    }
  }

  %debug {
    padding-right: 0;
    padding-left: 0;

    border-right: map-get($settings, "margin") solid rgba(0, 186, 255, 0.1);
    border-left: map-get($settings, "margin") solid rgba(0, 186, 255, 0.1);
    background-color: rgba(235, 0, 255, 0.1);

    &:hover {
      border-right-color: rgba(0, 186, 255, 0.3);
      border-left-color: rgba(0, 186, 255, 0.3);
      background-color: rgba(235, 0, 255, 0.3);
    }
  }
  %clearfix {
    &:after {
      clear: both;
    }

    &:after,
    &:before {
      display: table;

      content: "";
    }
  }

  %debug-labels {
    position: fixed;
    top: 5px;
    left: 5px;

    content: "";
    text-transform: uppercase;

    font-family: "Open Sans Light", "Segoe Ui Light", sans-serif ;
    font-size: 16px;
    line-height: 25px;
  }
}

// Render Grid
.container {
  @include box-sizing(border-box);

  *{
    @include box-sizing(border-box);
  }

  max-width: map-get($settings, "maxWidth");
  margin-right: auto;
  margin-left: auto;
  padding-right: map-get($settings, "margin");
  padding-left: map-get($settings, "margin");

  @extend %clearfix;

  &.fluid{
    max-width: none !important;
    margin-right: 0px;
    margin-left: 0px;
  }
}

.row {
  margin-right: map-get($settings, "margin") * -1;
  margin-left: map-get($settings, "margin") * -1;

  @extend %clearfix;
}

@include renderGridStyles($settings);
@include renderGridDebug($settings);
